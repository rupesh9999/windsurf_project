version: '3.8'

services:
  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
    depends_on:
      - user-service
      - product-service
      - order-service
      - payment-service
    networks:
      - ecommerce-network

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=mysql-users
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=password
      - DB_NAME=ecommerce_users
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key
      - JWT_REFRESH_SECRET=your-refresh-secret
    depends_on:
      - mysql-users
      - redis
    networks:
      - ecommerce-network
    volumes:
      - ./services/user-service/logs:/app/logs

  # Product Service
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DB_HOST=mysql-products
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=password
      - DB_NAME=ecommerce_products
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=us-west-2
      - S3_BUCKET=ecommerce-product-images
    depends_on:
      - mysql-products
      - redis
    networks:
      - ecommerce-network
    volumes:
      - ./services/product-service/logs:/app/logs

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DB_HOST=mysql-orders
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=password
      - DB_NAME=ecommerce_orders
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USER_SERVICE_URL=http://user-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - PAYMENT_SERVICE_URL=http://payment-service:3004
    depends_on:
      - mysql-orders
      - redis
      - user-service
      - product-service
      - payment-service
    networks:
      - ecommerce-network
    volumes:
      - ./services/order-service/logs:/app/logs

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DB_HOST=mysql-payments
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=password
      - DB_NAME=ecommerce_payments
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    depends_on:
      - mysql-payments
      - redis
    networks:
      - ecommerce-network
    volumes:
      - ./services/payment-service/logs:/app/logs

  # Databases
  mysql-users:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=ecommerce_users
    ports:
      - "3306:3306"
    volumes:
      - mysql-users-data:/var/lib/mysql
    networks:
      - ecommerce-network

  mysql-products:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=ecommerce_products
    ports:
      - "3307:3306"
    volumes:
      - mysql-products-data:/var/lib/mysql
    networks:
      - ecommerce-network

  mysql-orders:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=ecommerce_orders
    ports:
      - "3308:3306"
    volumes:
      - mysql-orders-data:/var/lib/mysql
    networks:
      - ecommerce-network

  mysql-payments:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=ecommerce_payments
    ports:
      - "3309:3306"
    volumes:
      - mysql-payments-data:/var/lib/mysql
    networks:
      - ecommerce-network

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ecommerce-network
    command: redis-server --appendonly yes

  # Nginx API Gateway
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./devops/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./devops/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - user-service
      - product-service
      - order-service
      - payment-service
    networks:
      - ecommerce-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./devops/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecommerce-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./devops/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./devops/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ecommerce-network

volumes:
  mysql-users-data:
  mysql-products-data:
  mysql-orders-data:
  mysql-payments-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  ecommerce-network:
    driver: bridge
